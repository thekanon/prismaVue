/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  UserCreateInput: { // input type
    email?: string | null; // String
    username?: string | null; // String
    votes?: NexusGenInputs['UserVoteCreateManyWithoutUserInput'] | null; // UserVoteCreateManyWithoutUserInput
  }
  UserCreateOneWithoutVotesInput: { // input type
    connect?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
    connectOrCreate?: NexusGenInputs['UserCreateOrConnectWithoutvotesInput'] | null; // UserCreateOrConnectWithoutvotesInput
    create?: NexusGenInputs['UserCreateWithoutVotesInput'] | null; // UserCreateWithoutVotesInput
  }
  UserCreateOrConnectWithoutvotesInput: { // input type
    create: NexusGenInputs['UserCreateWithoutVotesInput']; // UserCreateWithoutVotesInput!
    where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
  }
  UserCreateWithoutVotesInput: { // input type
    email?: string | null; // String
    username?: string | null; // String
  }
  UserVoteCreateManyWithoutUserInput: { // input type
    connect?: NexusGenInputs['UserVoteWhereUniqueInput'][] | null; // [UserVoteWhereUniqueInput!]
    connectOrCreate?: NexusGenInputs['UserVoteCreateOrConnectWithoutuserInput'][] | null; // [UserVoteCreateOrConnectWithoutuserInput!]
    create?: NexusGenInputs['UserVoteCreateWithoutUserInput'][] | null; // [UserVoteCreateWithoutUserInput!]
  }
  UserVoteCreateManyWithoutVoteInput: { // input type
    connect?: NexusGenInputs['UserVoteWhereUniqueInput'][] | null; // [UserVoteWhereUniqueInput!]
    connectOrCreate?: NexusGenInputs['UserVoteCreateOrConnectWithoutvoteInput'][] | null; // [UserVoteCreateOrConnectWithoutvoteInput!]
    create?: NexusGenInputs['UserVoteCreateWithoutVoteInput'][] | null; // [UserVoteCreateWithoutVoteInput!]
  }
  UserVoteCreateOrConnectWithoutuserInput: { // input type
    create: NexusGenInputs['UserVoteCreateWithoutUserInput']; // UserVoteCreateWithoutUserInput!
    where: NexusGenInputs['UserVoteWhereUniqueInput']; // UserVoteWhereUniqueInput!
  }
  UserVoteCreateOrConnectWithoutvoteInput: { // input type
    create: NexusGenInputs['UserVoteCreateWithoutVoteInput']; // UserVoteCreateWithoutVoteInput!
    where: NexusGenInputs['UserVoteWhereUniqueInput']; // UserVoteWhereUniqueInput!
  }
  UserVoteCreateWithoutUserInput: { // input type
    vote: NexusGenInputs['VoteCreateOneWithoutUsersInput']; // VoteCreateOneWithoutUsersInput!
    voteSelect?: string | null; // String
  }
  UserVoteCreateWithoutVoteInput: { // input type
    user: NexusGenInputs['UserCreateOneWithoutVotesInput']; // UserCreateOneWithoutVotesInput!
    voteSelect?: string | null; // String
  }
  UserVoteWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  UserWhereUniqueInput: { // input type
    email?: string | null; // String
    id?: number | null; // Int
  }
  VoteCreateManyWithoutLowerVoteInput: { // input type
    connect?: NexusGenInputs['VoteWhereUniqueInput'][] | null; // [VoteWhereUniqueInput!]
    connectOrCreate?: NexusGenInputs['VoteCreateOrConnectWithoutlowerVoteInput'][] | null; // [VoteCreateOrConnectWithoutlowerVoteInput!]
    create?: NexusGenInputs['VoteCreateWithoutLowerVoteInput'][] | null; // [VoteCreateWithoutLowerVoteInput!]
  }
  VoteCreateManyWithoutUpperVoteInput: { // input type
    connect?: NexusGenInputs['VoteWhereUniqueInput'][] | null; // [VoteWhereUniqueInput!]
    connectOrCreate?: NexusGenInputs['VoteCreateOrConnectWithoutupperVoteInput'][] | null; // [VoteCreateOrConnectWithoutupperVoteInput!]
    create?: NexusGenInputs['VoteCreateWithoutUpperVoteInput'][] | null; // [VoteCreateWithoutUpperVoteInput!]
  }
  VoteCreateOneWithoutUsersInput: { // input type
    connect?: NexusGenInputs['VoteWhereUniqueInput'] | null; // VoteWhereUniqueInput
    connectOrCreate?: NexusGenInputs['VoteCreateOrConnectWithoutusersInput'] | null; // VoteCreateOrConnectWithoutusersInput
    create?: NexusGenInputs['VoteCreateWithoutUsersInput'] | null; // VoteCreateWithoutUsersInput
  }
  VoteCreateOrConnectWithoutlowerVoteInput: { // input type
    create: NexusGenInputs['VoteCreateWithoutLowerVoteInput']; // VoteCreateWithoutLowerVoteInput!
    where: NexusGenInputs['VoteWhereUniqueInput']; // VoteWhereUniqueInput!
  }
  VoteCreateOrConnectWithoutupperVoteInput: { // input type
    create: NexusGenInputs['VoteCreateWithoutUpperVoteInput']; // VoteCreateWithoutUpperVoteInput!
    where: NexusGenInputs['VoteWhereUniqueInput']; // VoteWhereUniqueInput!
  }
  VoteCreateOrConnectWithoutusersInput: { // input type
    create: NexusGenInputs['VoteCreateWithoutUsersInput']; // VoteCreateWithoutUsersInput!
    where: NexusGenInputs['VoteWhereUniqueInput']; // VoteWhereUniqueInput!
  }
  VoteCreateWithoutLowerVoteInput: { // input type
    description: string; // String!
    title: string; // String!
    upperVote?: NexusGenInputs['VoteCreateManyWithoutLowerVoteInput'] | null; // VoteCreateManyWithoutLowerVoteInput
    users?: NexusGenInputs['UserVoteCreateManyWithoutVoteInput'] | null; // UserVoteCreateManyWithoutVoteInput
    val1?: string | null; // String
    val10?: string | null; // String
    val11?: string | null; // String
    val12?: string | null; // String
    val13?: string | null; // String
    val14?: string | null; // String
    val15?: string | null; // String
    val16?: string | null; // String
    val17?: string | null; // String
    val18?: string | null; // String
    val19?: string | null; // String
    val2?: string | null; // String
    val20?: string | null; // String
    val3?: string | null; // String
    val4?: string | null; // String
    val5?: string | null; // String
    val6?: string | null; // String
    val7?: string | null; // String
    val8?: string | null; // String
    val9?: string | null; // String
  }
  VoteCreateWithoutUpperVoteInput: { // input type
    description: string; // String!
    lowerVote?: NexusGenInputs['VoteCreateManyWithoutUpperVoteInput'] | null; // VoteCreateManyWithoutUpperVoteInput
    title: string; // String!
    users?: NexusGenInputs['UserVoteCreateManyWithoutVoteInput'] | null; // UserVoteCreateManyWithoutVoteInput
    val1?: string | null; // String
    val10?: string | null; // String
    val11?: string | null; // String
    val12?: string | null; // String
    val13?: string | null; // String
    val14?: string | null; // String
    val15?: string | null; // String
    val16?: string | null; // String
    val17?: string | null; // String
    val18?: string | null; // String
    val19?: string | null; // String
    val2?: string | null; // String
    val20?: string | null; // String
    val3?: string | null; // String
    val4?: string | null; // String
    val5?: string | null; // String
    val6?: string | null; // String
    val7?: string | null; // String
    val8?: string | null; // String
    val9?: string | null; // String
  }
  VoteCreateWithoutUsersInput: { // input type
    description: string; // String!
    lowerVote?: NexusGenInputs['VoteCreateManyWithoutUpperVoteInput'] | null; // VoteCreateManyWithoutUpperVoteInput
    title: string; // String!
    upperVote?: NexusGenInputs['VoteCreateManyWithoutLowerVoteInput'] | null; // VoteCreateManyWithoutLowerVoteInput
    val1?: string | null; // String
    val10?: string | null; // String
    val11?: string | null; // String
    val12?: string | null; // String
    val13?: string | null; // String
    val14?: string | null; // String
    val15?: string | null; // String
    val16?: string | null; // String
    val17?: string | null; // String
    val18?: string | null; // String
    val19?: string | null; // String
    val2?: string | null; // String
    val20?: string | null; // String
    val3?: string | null; // String
    val4?: string | null; // String
    val5?: string | null; // String
    val6?: string | null; // String
    val7?: string | null; // String
    val8?: string | null; // String
    val9?: string | null; // String
  }
  VoteWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  User: { // root type
    email?: string | null; // String
    id: number; // Int!
    username?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createDraft: NexusGenRootTypes['Post'] | null; // Post
    publish: NexusGenRootTypes['Post'] | null; // Post
    signupUser: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    feed: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    filterPosts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  User: { // field return type
    email: string | null; // String
    id: number; // Int!
    username: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createDraft: 'Post'
    publish: 'Post'
    signupUser: 'User'
  }
  Query: { // field return type name
    feed: 'Post'
    filterPosts: 'Post'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createDraft: { // args
      authorEmail?: string | null; // String
      content?: string | null; // String
      title: string; // String!
    }
    publish: { // args
      id?: string | null; // ID
    }
    signupUser: { // args
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
  }
  Query: {
    filterPosts: { // args
      searchString?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}